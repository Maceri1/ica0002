---
- name: Install MySQL server
  ansible.builtin.apt:
    name: mysql-server
    state: present

- name: Ensure MySQL service is running
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes

- name: Create MySQL override config to allow external connections
  ansible.builtin.copy:
    dest: /etc/mysql/mysql.conf.d/override.cnf
    content: |
      [mysqld]
      bind-address = 0.0.0.0
  notify: Restart MySQL

- name: Install PyMySQL library
  ansible.builtin.apt:
    name: python3-pymysql
    state: present

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock  

- name: Create MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL exporter system user
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{ mysql_exporter_password }}"
    host: "%"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true


- name: Create .my.cnf for MySQL exporter
  ansible.builtin.template:
    src: my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
  no_log: true
  notify: Restart MySQL Exporter

- name: Install MySQL exporter
  ansible.builtin.apt:
    name: prometheus-mysqld-exporter
    state: present

- name: Flush handlers to ensure MySQL is restarted before starting the exporter
  meta: flush_handlers

- name: Ensure MySQL exporter is started and enabled
  ansible.builtin.systemd:
    name: prometheus-mysqld-exporter
    state: started
    enabled: yes

- name: Ensure /home/backup/mysql directory is created
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: '0775'

- name: Create MySQL backup user
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ mysql_backup_password }}"
    priv: "{{ mysql_database }}.*:LOCK TABLES,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Create MySQL client configuration file for backup user
  ansible.builtin.template:
    src: backup.my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: '0600'
  no_log: true

- name: Ensure /etc/cron.d/mysql-backup file is created
  ansible.builtin.template:
    src: mysql.backup.cron.j2
    dest: /etc/cron.d/mysql-backup
    owner: root 
    group: root
    mode: '0644'